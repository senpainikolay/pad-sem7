// protoc --go_out=internal/pb --go_opt=paths=source_relative --go-grpc_out=internal/pb --go-grpc_opt=paths=source_relative internal/proto/accident.proto

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: internal/proto/accident.proto

package accident_reporting_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccidentReportingService_FetchAccidents_FullMethodName  = "/proto.AccidentReportingService/FetchAccidents"
	AccidentReportingService_PostAccident_FullMethodName    = "/proto.AccidentReportingService/PostAccident"
	AccidentReportingService_ConfirmAccident_FullMethodName = "/proto.AccidentReportingService/ConfirmAccident"
	AccidentReportingService_HealthCheck_FullMethodName     = "/proto.AccidentReportingService/HealthCheck"
)

// AccidentReportingServiceClient is the client API for AccidentReportingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccidentReportingServiceClient interface {
	FetchAccidents(ctx context.Context, in *FetchAccidentRequest, opts ...grpc.CallOption) (*GetAccidentResponse, error)
	PostAccident(ctx context.Context, in *PostAccidentRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	ConfirmAccident(ctx context.Context, in *ConfirmAccidentRequest, opts ...grpc.CallOption) (*GenericResponse, error)
	HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error)
}

type accidentReportingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccidentReportingServiceClient(cc grpc.ClientConnInterface) AccidentReportingServiceClient {
	return &accidentReportingServiceClient{cc}
}

func (c *accidentReportingServiceClient) FetchAccidents(ctx context.Context, in *FetchAccidentRequest, opts ...grpc.CallOption) (*GetAccidentResponse, error) {
	out := new(GetAccidentResponse)
	err := c.cc.Invoke(ctx, AccidentReportingService_FetchAccidents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accidentReportingServiceClient) PostAccident(ctx context.Context, in *PostAccidentRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, AccidentReportingService_PostAccident_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accidentReportingServiceClient) ConfirmAccident(ctx context.Context, in *ConfirmAccidentRequest, opts ...grpc.CallOption) (*GenericResponse, error) {
	out := new(GenericResponse)
	err := c.cc.Invoke(ctx, AccidentReportingService_ConfirmAccident_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accidentReportingServiceClient) HealthCheck(ctx context.Context, in *HealthRequest, opts ...grpc.CallOption) (*HealthResponse, error) {
	out := new(HealthResponse)
	err := c.cc.Invoke(ctx, AccidentReportingService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccidentReportingServiceServer is the server API for AccidentReportingService service.
// All implementations must embed UnimplementedAccidentReportingServiceServer
// for forward compatibility
type AccidentReportingServiceServer interface {
	FetchAccidents(context.Context, *FetchAccidentRequest) (*GetAccidentResponse, error)
	PostAccident(context.Context, *PostAccidentRequest) (*GenericResponse, error)
	ConfirmAccident(context.Context, *ConfirmAccidentRequest) (*GenericResponse, error)
	HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error)
	mustEmbedUnimplementedAccidentReportingServiceServer()
}

// UnimplementedAccidentReportingServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccidentReportingServiceServer struct {
}

func (UnimplementedAccidentReportingServiceServer) FetchAccidents(context.Context, *FetchAccidentRequest) (*GetAccidentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchAccidents not implemented")
}
func (UnimplementedAccidentReportingServiceServer) PostAccident(context.Context, *PostAccidentRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostAccident not implemented")
}
func (UnimplementedAccidentReportingServiceServer) ConfirmAccident(context.Context, *ConfirmAccidentRequest) (*GenericResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmAccident not implemented")
}
func (UnimplementedAccidentReportingServiceServer) HealthCheck(context.Context, *HealthRequest) (*HealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedAccidentReportingServiceServer) mustEmbedUnimplementedAccidentReportingServiceServer() {
}

// UnsafeAccidentReportingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccidentReportingServiceServer will
// result in compilation errors.
type UnsafeAccidentReportingServiceServer interface {
	mustEmbedUnimplementedAccidentReportingServiceServer()
}

func RegisterAccidentReportingServiceServer(s grpc.ServiceRegistrar, srv AccidentReportingServiceServer) {
	s.RegisterService(&AccidentReportingService_ServiceDesc, srv)
}

func _AccidentReportingService_FetchAccidents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchAccidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccidentReportingServiceServer).FetchAccidents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccidentReportingService_FetchAccidents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccidentReportingServiceServer).FetchAccidents(ctx, req.(*FetchAccidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccidentReportingService_PostAccident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostAccidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccidentReportingServiceServer).PostAccident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccidentReportingService_PostAccident_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccidentReportingServiceServer).PostAccident(ctx, req.(*PostAccidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccidentReportingService_ConfirmAccident_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfirmAccidentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccidentReportingServiceServer).ConfirmAccident(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccidentReportingService_ConfirmAccident_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccidentReportingServiceServer).ConfirmAccident(ctx, req.(*ConfirmAccidentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccidentReportingService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccidentReportingServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccidentReportingService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccidentReportingServiceServer).HealthCheck(ctx, req.(*HealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccidentReportingService_ServiceDesc is the grpc.ServiceDesc for AccidentReportingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccidentReportingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AccidentReportingService",
	HandlerType: (*AccidentReportingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchAccidents",
			Handler:    _AccidentReportingService_FetchAccidents_Handler,
		},
		{
			MethodName: "PostAccident",
			Handler:    _AccidentReportingService_PostAccident_Handler,
		},
		{
			MethodName: "ConfirmAccident",
			Handler:    _AccidentReportingService_ConfirmAccident_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _AccidentReportingService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/accident.proto",
}
